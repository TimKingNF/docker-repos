/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "datahub.txzing.com/mysql-gr-operator/pkg/apis/txz_datahub/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MysqlGROperatorLister helps list MysqlGROperators.
type MysqlGROperatorLister interface {
	// List lists all MysqlGROperators in the indexer.
	List(selector labels.Selector) (ret []*v1.MysqlGROperator, err error)
	// MysqlGROperators returns an object that can list and get MysqlGROperators.
	MysqlGROperators(namespace string) MysqlGROperatorNamespaceLister
	MysqlGROperatorListerExpansion
}

// mysqlGROperatorLister implements the MysqlGROperatorLister interface.
type mysqlGROperatorLister struct {
	indexer cache.Indexer
}

// NewMysqlGROperatorLister returns a new MysqlGROperatorLister.
func NewMysqlGROperatorLister(indexer cache.Indexer) MysqlGROperatorLister {
	return &mysqlGROperatorLister{indexer: indexer}
}

// List lists all MysqlGROperators in the indexer.
func (s *mysqlGROperatorLister) List(selector labels.Selector) (ret []*v1.MysqlGROperator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MysqlGROperator))
	})
	return ret, err
}

// MysqlGROperators returns an object that can list and get MysqlGROperators.
func (s *mysqlGROperatorLister) MysqlGROperators(namespace string) MysqlGROperatorNamespaceLister {
	return mysqlGROperatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MysqlGROperatorNamespaceLister helps list and get MysqlGROperators.
type MysqlGROperatorNamespaceLister interface {
	// List lists all MysqlGROperators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.MysqlGROperator, err error)
	// Get retrieves the MysqlGROperator from the indexer for a given namespace and name.
	Get(name string) (*v1.MysqlGROperator, error)
	MysqlGROperatorNamespaceListerExpansion
}

// mysqlGROperatorNamespaceLister implements the MysqlGROperatorNamespaceLister
// interface.
type mysqlGROperatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MysqlGROperators in the indexer for a given namespace.
func (s mysqlGROperatorNamespaceLister) List(selector labels.Selector) (ret []*v1.MysqlGROperator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MysqlGROperator))
	})
	return ret, err
}

// Get retrieves the MysqlGROperator from the indexer for a given namespace and name.
func (s mysqlGROperatorNamespaceLister) Get(name string) (*v1.MysqlGROperator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("mysqlgroperator"), name)
	}
	return obj.(*v1.MysqlGROperator), nil
}
